#!/bin/bash
export MSYS_NO_PATHCONV=1
set -e

function echoBlue (){
  (
    _msg=${1}
    _blue='\e[34m'
    _nc='\e[0m' # No Color
    echo -e "${_blue}${_msg}${_nc}" >&2
  )
}

function echoYellow (){
  (
  _msg=${1}
  _yellow='\e[33m'
  _nc='\e[0m' # No Color
  echo -e "${_yellow}${_msg}${_nc}" >&2
  )
}

function isInstalled() {
  (
    if [ -x "$(command -v ${@})" ]; then
      return 0
    else
      return 1
    fi
  )
}

DOCKER_EXE="docker"
if ! isInstalled ${DOCKER_EXE}; then
  echoYellow "${DOCKER_EXE} is not installed."
  exit 1
fi

DOCKER_COMPOSE_EXE="${DOCKER_EXE} compose"
if ! isInstalled ${DOCKER_COMPOSE_EXE}; then
  echoYellow "${DOCKER_COMPOSE_EXE} is not installed."
  exit 1
fi

S2I_EXE=s2i
if ! isInstalled ${S2I_EXE}; then
  echo -e "The ${S2I_EXE} executable is needed and not on your path."
  echo -e "It can be downloaded from here: https://github.com/openshift/source-to-image"
  echo -e "Make sure you place it in a directory on your path."
  exit 1
fi

SCRIPT_HOME="$( cd "$( dirname "$0" )" && pwd )"
export COMPOSE_PROJECT_NAME="${COMPOSE_PROJECT_NAME-nfspoc}"

# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------
usage() {
  cat <<-EOF

  Usage: $0 {start|logs|shell|stop|build|rm}

  Options:

  build - Build the docker image(s) for the project.
          You need to do this first, since the builds require
          a combination of Docker and S2I builds.

  start - Creates the application containers from the built images
          and starts the services based on the docker-compose.yml file.
          
          Launches a web browser to the application and tails the container logs.

  logs - Tails the container logs.

  shell - Opens a bash terminal session inside the running application container.

  stop - Stops the services.  This is a non-destructive process.  The containers
         are not deleted so they will be reused the next time you run start.

  rm - Removes any existing application containers.
EOF
exit 1
}
# -----------------------------------------------------------------------------------------------------------------
# Default Settings:
# -----------------------------------------------------------------------------------------------------------------
DEFAULT_CONTAINERS="${COMPOSE_PROJECT_NAME}"

# -----------------------------------------------------------------------------------------------------------------
# Functions:
# -----------------------------------------------------------------------------------------------------------------
build-all() {
  build-nfspoc
}

build-nfspoc() {
  echo -e "\n\n===================================================================================================="
  echo -e "Building the ${COMPOSE_PROJECT_NAME} image using s2i ..."
  echo -e "----------------------------------------------------------------------------------------------------"
  ${S2I_EXE} build \
    --copy \
    -e MAVEN_S2I_GOALS="clean install" \
    '..' \
    'fabric8/s2i-java' \
    ${COMPOSE_PROJECT_NAME}
  echo -e "===================================================================================================="
}

configureEnvironment () {
  for arg in $@; do
    case "$arg" in
      *=*)
        export ${arg}
        ;;
    esac
  done

  # nfcpoc
  export NFCPOC_PORT=${NFCPOC_PORT:-8080}
  export NFCPOC_EXPOSE_PORT=${NFCPOC_EXPOSE_PORT:-${NFCPOC_PORT}}
  export POC_ORDS_ENDPOINT=${POC_ORDS_ENDPOINT:-http://myendpoint}
  export POC_ORDS_USERNAME=${POC_ORDS_USERNAME:-myuser}
  export POC_ORDS_PASSWORD=${POC_ORDS_PASSWORD:-mypass}
  export POC_ORDS_APP_ID=${POC_ORDS_APP_ID:-12345}
  export POC_ORDS_APP_PWD=${POC_ORDS_APP_PWD:-12345}
  export POC_ORDS_TICKET_LIFETIME=${POC_ORDS_TICKET_LIFETIME:-120}
  export POC_WRAPPER_BASEPATH=${POC_WRAPPER_BASEPATH:-http://myendpoint}
}

getStartupParams() {
  CONTAINERS=""
  ARGS="--force-recreate"

  for arg in $@; do
    case "$arg" in
      *=*)
        # Skip it
        ;;
     -*)
        ARGS+=" $arg";;
      *)
        CONTAINERS+=" $arg";;
    esac
  done

  if [ -z "$CONTAINERS" ]; then
    CONTAINERS="$DEFAULT_CONTAINERS"
  fi

  echo ${ARGS} ${CONTAINERS}
}

deleteVolumes() {
  _projectName=${COMPOSE_PROJECT_NAME:-docker}

  echo "Stopping and removing any running containers ..."
  ${DOCKER_COMPOSE_EXE} rm -svf >/dev/null

  _pattern="^${_projectName}_\|^docker_"
  _volumes=$(docker volume ls -q | grep ${_pattern})

  if [ ! -z "${_volumes}" ]; then
    echo "Removing project volumes ..."
    echo ${_volumes} |  xargs docker volume rm
  else
    echo "No project volumes exist."
  fi
}

toLower() {
  echo $(echo ${@} | tr '[:upper:]' '[:lower:]')
}

functionExists() {
  (
    if [ ! -z ${1} ] && type ${1} &>/dev/null; then
      return 0
    else
      return 1
    fi
  )
}

clean() {
  docker rmi --force ${COMPOSE_PROJECT_NAME}
  docker image prune --force
}

function logs() {
  (
    echoBlue "Following container logs for ${@} ..."
    ${DOCKER_COMPOSE_EXE} logs -f ${@}
  )
}

function openInBrowser(){
  (
    unset openBrowserCmd
    if [[ "$OSTYPE" == "msys" ]]; then
      openBrowserCmd='cmd "/c start ${url}"'
    elif [ $(uname) == "Darwin" ]; then
      openBrowserCmd='open ${url}'
    elif [ $(uname) == "Linux" ]; then
      openBrowserCmd='xdg-open ${url}'
    fi

    if [ ! -z "${openBrowserCmd}" ]; then
      for url in ${@}; do
        echoBlue "\nOpening ${url} in your default browser ..."
        eval ${openBrowserCmd}
      done
    else
      echoYellow "Unable to detect browser start command. Please browser to the following application URLs:"
      for url in ${@}; do
        echo "  - ${url}"
      done
    fi
  )
}

function openShell() {
  (
    echoBlue "Connecting remote shell to ${@} (type 'exit' to exit) ..."
    ${DOCKER_COMPOSE_EXE} exec ${@} /bin/bash
  )
}
# =================================================================================================================

pushd ${SCRIPT_HOME} >/dev/null
COMMAND=$(toLower ${1})
shift

case "$COMMAND" in
  start)
    _startupParams=$(getStartupParams $@)
    configureEnvironment $@
    ${DOCKER_COMPOSE_EXE} up -d ${_startupParams}
    sleep 3
    openInBrowser "http://localhost:8080/demo/start"
    logs ${COMPOSE_PROJECT_NAME}
    ;;
  logs)
    logs ${COMPOSE_PROJECT_NAME}
    ;;
  shell)
    openShell ${COMPOSE_PROJECT_NAME}
    ;;
  stop)
    configureEnvironment $@
    ${DOCKER_COMPOSE_EXE} stop
    ;;
  rm|down)
    configureEnvironment $@
    deleteVolumes
    ;;
  clean)
    configureEnvironment $@
    clean
    ;;
  build)
    buildImage=$(toLower ${1})
    shift || buildImage=all
    buildImage=$(echo ${buildImage} | sed s~^${COMPOSE_PROJECT_NAME}-~~)
    case "$buildImage" in
      *=*)
        buildImage=all
        ;;
    esac

    if functionExists "build-${buildImage}"; then
      configureEnvironment $@
      eval "build-${buildImage}"
    else
      echo -e "Error:\nThe build function, build-${buildImage}, does not exist.  Please check your build parameters and try again.\nUse '-h' to get full help details."
      exit 1
    fi
    ;;
  *)
    usage
esac

popd >/dev/null
